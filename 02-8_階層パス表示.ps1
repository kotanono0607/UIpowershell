# ================================================================
# 02-8_階層パス表示.ps1
# ================================================================
# 責任: 階層パス表示機能（レイヤー0→レイヤー1→...）
# 
# 含まれる関数:
#   - Check-Pink選択配列Objects
#   - 階層パスを取得する
#   - 階層パス表示を更新する
#
# リファクタリング: 2025-11-01
# 元ファイル: 02_メインフォームUI_foam関数.ps1 (行2513-2638)
# ================================================================

function Check-Pink選択配列Objects {
    #Write-Host "---- Check-Pink選択配列Objects 関数開始 ----"

    # グローバル変数が存在するか確認
    if (-not (Test-Path variable:Global:Pink選択配列)) {
        Write-Warning "グローバル変数 'Pink選択配列' が存在しません。"
        #Write-Host "結果: FALSE"
        return $false
    } else {
        #Write-Host "グローバル変数 'Pink選択配列' は存在します。"
    }

    # グローバル変数が配列であるか確認
    if (-not ($Global:Pink選択配列 -is [System.Array])) {
        Write-Warning "'Pink選択配列' は配列ではありません。"
        #Write-Host "現在の値: $($Global:Pink選択配列)"
        #Write-Host "結果: FALSE"
        return $false
    } else {
        #Write-Host "'Pink選択配列' は配列です。"
    }

    # 各オブジェクトをループして、'値' プロパティが1かどうかをチェック
    foreach ($item in $Global:Pink選択配列) {
        #Write-Host "`n--- レイヤー $($item.レイヤー) の内容 ---"
        #Write-Host "初期Y: $($item.初期Y)"
        #Write-Host "値: $($item.値)"

        if ($item.値 -eq 1) {
            #Write-Host "レイヤー $($item.レイヤー) の値が1です。"
            #Write-Host "結果: TRUE"
            return $true
        } else {
            #Write-Host "レイヤー $($item.レイヤー) の値は1ではありません。"
        }
    }

    # すべてのレイヤーの値が0の場合
    #Write-Host "`nすべてのレイヤーの値が0です。"
    #Write-Host "結果: FALSE"
    return $false
}

# ========================================
# 階層パス表示機能
# ========================================

function 階層パスを取得する {
    <#
    .SYNOPSIS
    現在のレイヤーまでの階層パスを取得します。

    .DESCRIPTION
    Pink選択配列から展開ボタン名を取得し、階層パスを構築します。
    例: "レイヤー0 → 82-1(スクリプト) → レイヤー1 → 85-1(スクリプト) → レイヤー2"

    .PARAMETER 現在のレイヤー番号
    現在表示しているレイヤーの番号（0-6）

    .OUTPUTS
    System.String 階層パス文字列
    #>
    param (
        [int]$現在のレイヤー番号
    )

    if ($現在のレイヤー番号 -eq 0) {
        return "レイヤー0"
    }

    $パス部分 = @()
    $パス部分 += "レイヤー0"

    for ($i = 0; $i -lt $現在のレイヤー番号; $i++) {
        $展開ボタン = $Global:Pink選択配列[$i].展開ボタン

        # ★ 修正（問題#3対応）: レイヤー0→レイヤー1は初期状態なので特別扱い
        if ($i -eq 0 -and ($展開ボタン -eq $null -or $展開ボタン -eq 0 -or $展開ボタン -eq "")) {
            # レイヤー0→レイヤー1は初期レイヤーなので、展開ボタンなしで直接遷移
            $パス部分 += "→ レイヤー1"
        } elseif ($展開ボタン -and $展開ボタン -ne 0) {
            # 展開ボタン名を取得
            $パス部分 += "→ $展開ボタン"
            $パス部分 += "→ レイヤー$($i + 1)"
        } else {
            # 展開ボタンが記録されていない場合（通常は発生しない）
            $パス部分 += "→ [不明]"
            $パス部分 += "→ レイヤー$($i + 1)"
        }
    }

    return ($パス部分 -join " ")
}

function 階層パス表示を更新する {
    <#
    .SYNOPSIS
    階層パス表示ラベルを更新します。

    .DESCRIPTION
    現在のレイヤー番号を取得し、階層パスを計算してラベルに表示します。
    #>

    # 階層パスラベルが存在するか確認
    if (-not $Global:階層パス表示ラベル) {
        Write-Warning "階層パス表示ラベルが初期化されていません。"
        return
    }

    # 現在のレイヤー番号を取得
    $現在のレイヤー番号 = グローバル変数から数値取得 -パネル $Global:可視左パネル

    if ($null -eq $現在のレイヤー番号) {
        $現在のレイヤー番号 = 0
    }

    # 階層パスを取得
    $階層パス = 階層パスを取得する -現在のレイヤー番号 $現在のレイヤー番号

    # ラベルのテキストを更新
    $Global:階層パス表示ラベル.Text = "📍 階層パス: $階層パス"

    # デバッグログ出力
    Write-Host "[階層パス] $階層パス" -ForegroundColor Cyan
}
